#!/usr/bin/env bash

assert_num_args () {
  num_args_received=$1
  num_args_expected=$2
  if [ "$num_args_received" -ne "$num_args_expected" ]
  then
    echo "Error: Wrong number of arguments (expected=$num_args_expected received=$num_args_received)"
    usage
    exit 1
  fi
}

assert_import_dir_exists () {
  import_dir=$1
  if [ ! -d "$import_dir" ]
  then
    echo "Import directory doesn't exist! [${import_dir}]"
    exit 1
  fi
}

assert_import_file_or_dir_exists () {
  import_file_or_dir=$1
  if [ ! -f "$import_file_or_dir" ] && [ ! -d "$import_file_or_dir" ]
  then
    echo "Import file/directory doesn't exist! [${import_file_or_dir}]"
    exit 1
  fi
}

op_domain () {
  assert_num_args $# 2
  DOMAIN_NAME=$1
  IMPORT_DIR=$(readlink -v -f "$2")
  assert_import_dir_exists "$IMPORT_DIR"

  DOMAIN_OPTIONS=""
  if [ ! -z $OVERWRITE ]
  then
    DOMAIN_OPTIONS="${DOMAIN_OPTIONS}overwrite=${OVERWRITE};"
  fi
  if [ ! -z $ENABLED ]
  then
    DOMAIN_OPTIONS="${DOMAIN_OPTIONS}enabled=${ENABLED};"
  fi
  if [ ! -z $TENANT_NAME ]
  then
    DOMAIN_OPTIONS="${DOMAIN_OPTIONS}tenant_name=${TENANT_NAME};"
  fi
  if [ ! -z $TENANT_ID ]
  then
    DOMAIN_OPTIONS="${DOMAIN_OPTIONS}tenant_id=${TENANT_ID};"
  fi

  echo "DOMAIN_OPTIONS=${DOMAIN_OPTIONS}"
  
  pushd /var/www/miq/vmdb
  bin/rake "rhconsulting:miq_ae_datastore:import_with_options[${DOMAIN_NAME},${IMPORT_DIR},${DOMAIN_OPTIONS}]"
  popd
}

op_reports () {
  assert_num_args $# 1
  IMPORT_DIR=$(readlink -v -f "$1")
  assert_import_dir_exists "$IMPORT_DIR"

  pushd /var/www/miq/vmdb
  bin/rake "rhconsulting:miq_reports:import[${IMPORT_DIR}]"
  popd
}

op_widgets () {
  assert_num_args $# 1
  IMPORT_DIR=$(readlink -v -f "$1")
  assert_import_dir_exists "$IMPORT_DIR"

  pushd /var/www/miq/vmdb
  bin/rake "rhconsulting:miq_widgets:import[${IMPORT_DIR}]"
  popd
}

op_alerts () {
  assert_num_args $# 1  
  IMPORT_FILE_OR_DIR=$(readlink -v -f "$1")
  assert_import_file_or_dir_exists "$IMPORT_FILE_OR_DIR"
  
  pushd /var/www/miq/vmdb
  bin/rake "rhconsulting:miq_alerts:import[${IMPORT_FILE_OR_DIR}]"
  popd
}

op_alertsets () {
  assert_num_args $# 1
  IMPORT_FILE_OR_DIR=$(readlink -v -f "$1")
  assert_import_file_or_dir_exists "$IMPORT_FILE_OR_DIR"

  pushd /var/www/miq/vmdb
  bin/rake "rhconsulting:miq_alertsets:import[${IMPORT_FILE_OR_DIR}]"
  popd
}

op_policies () {
  assert_num_args $# 1
  IMPORT_DIR=$(readlink -v -f "$1")
  assert_import_dir_exists "$IMPORT_DIR"

  pushd /var/www/miq/vmdb
  bin/rake "rhconsulting:miq_policies:import[${IMPORT_DIR}]"
  popd
}

op_provision_dialogs () {
  assert_num_args $# 1
  IMPORT_FILE_OR_DIR=$(readlink -v -f "$1")
  assert_import_file_or_dir_exists "$IMPORT_FILE_OR_DIR"

  pushd /var/www/miq/vmdb
  bin/rake "rhconsulting:provision_dialogs:import[${IMPORT_FILE_OR_DIR}]"
  popd
}

op_service_dialogs () {
  assert_num_args $# 1
  IMPORT_FILE_OR_DIR=$(readlink -v -f "$1")
  assert_import_file_or_dir_exists "$IMPORT_FILE_OR_DIR"

  pushd /var/www/miq/vmdb
  bin/rake "rhconsulting:service_dialogs:import[${IMPORT_FILE_OR_DIR}]"
  popd
}

op_service_catalogs () {
  assert_num_args $# 1
  IMPORT_DIR=$(readlink -v -f "$1")
  assert_import_dir_exists "$IMPORT_DIR"

  pushd /var/www/miq/vmdb
  bin/rake "rhconsulting:service_catalogs:import[${IMPORT_DIR}]"
  popd
}

op_roles () {
  assert_num_args $# 1
  IMPORT_FILE_OR_DIR=$(readlink -v -f "$1")
  assert_import_file_or_dir_exists "$IMPORT_FILE_OR_DIR"

  pushd /var/www/miq/vmdb
  bin/rake "rhconsulting:roles:import[${IMPORT_FILE_OR_DIR}]"
  popd
}

op_tags () {
  assert_num_args $# 1
  IMPORT_FILE_OR_DIR=$(readlink -v -f "$1")
  assert_import_file_or_dir_exists "$IMPORT_FILE_OR_DIR"

  pushd /var/www/miq/vmdb
  bin/rake "rhconsulting:tags:import[${IMPORT_FILE_OR_DIR}]"
  popd
}

op_buttons () {
  assert_num_args $# 1
  IMPORT_FILE_OR_DIR=$(readlink -v -f "$1")
  assert_import_file_or_dir_exists "$IMPORT_FILE_OR_DIR"

  pushd /var/www/miq/vmdb
  bin/rake "rhconsulting:buttons:import[${IMPORT_FILE_OR_DIR}]"
  popd
}

op_customization_templates () {
  assert_num_args $# 1
  IMPORT_FILE_OR_DIR=$(readlink -v -f "$1")
  assert_import_file_or_dir_exists "$IMPORT_FILE_OR_DIR"

  pushd /var/www/miq/vmdb
  bin/rake "rhconsulting:customization_templates:import[${IMPORT_FILE_OR_DIR}]"
  popd
}

contains () {
  SEARCH_TERM=$1
  shift
  LIST="$@"

  for element in $LIST; do
    if [[ "$SEARCH_TERM" == "$element" ]]; then
      return 0
    fi
  done

  return 1  
}


parse_arguments () {
  # initialize non-required arguments before the loop in case they are
  # not present in the command line
  OVERWRITE="false"
  ENABLED="true"
  TENANT_NAME=""
  TENANT_ID=""

  # http://stackoverflow.com/questions/402377/using-getopts-in-bash-shell-script-to-get-long-and-short-command-line-options
  # http://stackoverflow.com/questions/14786984/best-way-to-parse-cmdline-args-bash
  while [[ $# -ge 1 ]]
  do
    arg="$1"
    case "$arg" in
      --overwrite)
        OVERWRITE="true"
        shift # past the argument
        ;;
      --no-overwrite)
        OVERWRITE="false"
        shift # past the argument
        ;;
      --enabled)
        ENABLED="true"
        shift # past the argument
        ;;
      --disabled)
        ENABLED="false"
        shift # past the argument
        ;;
      --tenant-name)
        TENANT_NAME="$2"
        shift # past the argument
        shift # past the value
        ;;
      --tenant-name=*)
        TENANT_NAME="${arg#*=}"
        shift # past the argument=value
        ;;
      --tenant-id)
        TENANT_ID="$2"
        shift # past the argument
        shift # past the value
        ;;
      --tenant-id=*)
        TENANT_ID="${arg#*=}"
        shift # past the argument=value
        ;;
      --)
        shift # past the argument
        break # stop parsing arguments
        ;;
      *)
        # unknown option
        break # stop parsing arguments
        ;;
    esac
  done

  # if there are any required arguments check for them here

  # pass the shifted arguments back to the caller
  remaining_args="$@"
}

parse_action () {
  AVAILABLE_PARSERS=`compgen -A function | grep '^op_'`

  obj_type="$1"
  op_func="op_${obj_type}"
  contains $op_func $AVAILABLE_PARSERS; VALID_OP=$?

  if [ $VALID_OP -eq 0 ]
  then
    shift
    $op_func "$@"
  else
    echo "Error: Unknown object type: $obj_type"
    usage
    exit 1
  fi
}

usage () {
progname=`basename $0`

  cat << EOF
Usage: $progname <object_type> <additional_params> <importsource>

This command imports the specified object type from the <importsource>,
which may be a file or directory.

<additional_params> may be required depending on the type of object to be
imported.

Available Object Types:
  provision_dialogs                Import provisioning dialogs.
  service_dialogs                  Import service dialogs.
  service_catalogs                 Import service catalogs.
  roles                            Import user roles.
  tags                             Import tags.
  buttons                          Import buttons.
  customization_templates          Import customization templates.
  reports                          Import custom reports.
  widgets                          Import custom widgets.
  policies                         Import policies.
  domain <name>                    Import the specified domain from the
                                   <importsource> directory. <name> MUST
                                   be specified.

Options:
  --overwrite                      Overwites the imported domain if it
                                   already exists in the database.
                                   Only used for "domain" object type.
                                   (Default = overwrite)

  --no-overwrite                   Do NOT overwite the domain if it
                                   already exists in the database.
                                   Only used for "domain" object type.
                                   (Default = overwrite)

  --enabled                        Enables the domain after it is imported.
                                   Only used for "domain" object type.
                                   (Default = enabled)

  --disabled                       Disables the domain after it is imported.
                                   Only used for "domain" object type.
                                   (Default = enabled)

  --tenant-name=NAME               Name of the Tenant for the domain after it is
                                   imported.
                                   Only used for "domain" object type.
                                   (Default = "")

  --tenant-id=ID                   ID of the Tenant for the domain after it is
                                   imported.
                                   Only used for "domain" object type.
                                   (Default = "")

Report bugs and feature requests to
https://github.com/rhtconsulting/cfme-rhconsulting-scripts

EOF

}

parse_arguments "$@"
parse_action "$remaining_args"
exit 0
