RAILS_ENV=production
APPLIANCE=true
# Force ExecJS to use node
EXECJS_RUNTIME='Node'
# workaround for virtual memory spike observed with RHEL6
MALLOC_ARENA_MAX=1
# Location of certificates and provider keys (miq-password and appliance console)
KEY_ROOT=/var/www/miq/vmdb/certs

# Force locale
LANGUAGE=en_US.UTF-8
LANG=en_US.UTF-8
LC_CTYPE=en_US.UTF-8

# Postgres (appliance console, PgAdmin)
APPLIANCE_PG_CTL=/usr/bin/pg_ctl
APPLIANCE_PG_MOUNT_POINT=/var/lib/pgsql
APPLIANCE_PG_DATA=/var/lib/pgsql/data
APPLIANCE_PG_SERVICE=postgresql
APPLIANCE_PG_PACKAGE_NAME=postgresql-server

# Configure the ruby 2.1+ garbage collector with initial values
# based on research found here: http://tmm1.net/ruby21-rgengc/
#
# bundle exec rails r "GC.start; puts GC.stat.values_at(:count, :heap_live_slots)"
#   before:
#     42     # run gc 42 times (minor and major)
#     461247 # live slots after a full GC
#   after:
#     17
#     461103
#
# default: run GC while actively allocating objects (we want this)
# RUBY_GC_HEAP_FREE_SLOTS=4095
# default: unlimited growth
RUBY_GC_HEAP_GROWTH_MAX_SLOTS=300000
# default: 10000 - set to the minimal number of slots needed
RUBY_GC_HEAP_INIT_SLOTS=600000
# default: 1.8 - smaller number means growing slower
RUBY_GC_HEAP_GROWTH_FACTOR=1.25
